---
- name: Add users from CSV to multiple groups, create users and groups if missing
  hosts: lab_all
  become: yes
  become_method: sudo
  become_user: root
  gather_facts: false

  vars:
    csv_path: "./newusers.csv"
    additional_groups:
      - "LZSCC_111_&_131"
      - "students"
      - "docker"    

  pre_tasks:
    - name: Check the CSV exists on the control node
      delegate_to: localhost
      run_once: true
      stat:
        path: "{{ csv_path | expanduser }}"
      register: csv_stat

    - name: Fail if CSV not found
      delegate_to: localhost
      run_once: true
      fail:
        msg: "CSV not found at {{ csv_path | expanduser }} on the control node."
      when: not csv_stat.stat.exists

    - name: Read users from CSV (requires community.general)
      delegate_to: localhost
      run_once: true
      community.general.read_csv:
        path: "{{ csv_path | expanduser }}"
      register: users_csv

    - name: Check for duplicate or empty usernames
      delegate_to: localhost
      run_once: true
      fail:
        msg: "Invalid usernames found: {{ invalid_usernames }}"
      vars:
        usernames: "{{ users_csv.list | map(attribute='Username') | list }}"
        empty_usernames: "{{ usernames | select('equalto', '') | list }}"
        unique_usernames: "{{ usernames | reject('equalto', '') | unique | list }}"
        has_duplicates: "{{ usernames | reject('equalto', '') | length > unique_usernames | length }}"
        duplicate_usernames: "{{ usernames | reject('equalto', '') | list | reject('in', unique_usernames) | list }}"
        invalid_usernames: "{{ empty_usernames + (duplicate_usernames if has_duplicates else []) }}"
      when: invalid_usernames | length > 0

  tasks:
    - name: Ensure specified groups exist
      group:
        name: "{{ item }}"
        state: present
      loop: "{{ additional_groups }}"
      loop_control:
        label: "{{ item }}"

    - name: Check if users exist
      command: "getent passwd {{ item.Username }}"
      loop: "{{ users_csv.list }}"
      loop_control:
        label: "{{ item.Username }}"
      register: user_check
      failed_when: false
      changed_when: false
      when:
        - item.Username is defined
        - item.Username | length > 0

    - name: Create or update users and add to groups
      vars:
        u: "{{ item.0 }}"
        user_exists: "{{ (item.1.rc == 0) }}"
      loop: "{{ users_csv.list | zip(user_check.results) | list }}"
      loop_control:
        label: "{{ u.Username }}"
      user:
        name: "{{ u.Username }}"
        comment: "{{ u.FirstName }} {{ u.LastName }}"
        groups: "{{ additional_groups | join(',') }}"
        shell: /bin/bash
        append: true
        create_home: true
        state: present
        password: "{{ u.Username | password_hash('sha512') }}"
      when:
        - u.Username is defined
        - u.Username | length > 0
