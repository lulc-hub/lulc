---
- name: Sync each user's latest password (from any host) to all hosts
  hosts: 'lu_1'
  gather_facts: false
  become: true

  vars:
    min_uid: 1000
    # Only accept real-looking password hashes (skip !, * or empty)
    valid_hash_regex: '^\$[0-9A-Za-z]+\$.*$'

  tasks:
    - name: Find local human users (UID >= min_uid and real shell)
      ansible.builtin.shell: |
        awk -F: '$3 >= {{ min_uid }} && $7 !~ /(nologin|false)$/ {print $1}' /etc/passwd
      register: human_users
      changed_when: false

    - name: Save list of local human users
      ansible.builtin.set_fact:
        local_human_users: "{{ human_users.stdout_lines | default([]) }}"

    - name: Read /etc/shadow for those users
      ansible.builtin.shell: |
        awk -F: '
          NR==FNR {u[$1]=1; next}
          ($1 in u) { printf "%s:%s:%s\n", $1, $2, $3 }
        ' /etc/passwd /etc/shadow
      register: shadow_lines
      changed_when: false

    - name: "Parse shadow lines into a per-host map {user: {hash,lastchg}}"
      ansible.builtin.set_fact:
        host_shadow_map: "{{ host_shadow_map | default({}) | combine({ rec[0]: {'hash': rec[1], 'lastchg': (rec[2] | int)} }) }}"
      loop: "{{ (shadow_lines.stdout_lines | default([])) | map('split', ':') | list }}"
      loop_control:
        loop_var: rec

    - name: Stash map into hostvars for aggregation
      ansible.builtin.set_fact:
        __shadow_map_for_agg: "{{ host_shadow_map | default({}) }}"

    - name: Build global 'latest per user' map across all hosts
      run_once: true
      ansible.builtin.set_fact:
        latest_shadow_by_user: >-
          {%- set acc = {} -%}
          {%- for h in groups['lu_1'] -%}
            {%- for u,rec in (hostvars[h].__shadow_map_for_agg | default({})).items() -%}
              {%- if rec.hash is regex(valid_hash_regex) -%}
                {%- set cur = acc.get(u) -%}
                {%- if (cur is none) or (rec.lastchg | int) > (cur.lastchg | int) -%}
                  {%- set _ = acc.update({ u: {'hash': rec.hash, 'lastchg': (rec.lastchg | int), 'source_host': h }}) -%}
                {%- endif -%}
              {%- endif -%}
            {%- endfor -%}
          {%- endfor -%}
          {{ acc }}

    - name: Show summary of winners (latest hash per user)
      run_once: true
      ansible.builtin.debug:
        var: latest_shadow_by_user

    # Build a quick {user: current_hash} map for this host
    - name: Prepare local current-hash map
      ansible.builtin.set_fact:
        local_current_hashes: "{{ host_shadow_map | default({}) | dict2items | items2dict(key_name='key', value_name='value.hash') }}"
    
    # Only run when the latest hash differs from the local one
    - name: Apply latest hashes to users that need updating on this host
      ansible.builtin.user:
        name: "{{ item.key }}"
        password: "{{ item.value.hash }}"
        # update_password: always   # optional; default is 'always'. Keep or remove.
      loop: "{{ (hostvars[inventory_hostname].latest_shadow_by_user | default({})) | dict2items }}"
      when:
        - item.key in (local_human_users | default([]))
        - item.value.hash is regex(valid_hash_regex)
        - (local_current_hashes[item.key] | default('')) != item.value.hash
    
    - name: Report users updated on this host
      ansible.builtin.debug:
        msg: >-
          Updated passwords for: {{
            ((hostvars[inventory_hostname].latest_shadow_by_user | default({}))
              | dict2items
              | selectattr('key', 'in', local_human_users | default([]))
              | selectattr('value.hash', 'ne', local_current_hashes[item.key] | default(''), context={'item': item})
              | map(attribute='key')
              | list)
          }}
      vars:
        item: ""
    
    - name: Report users updated on this host
      ansible.builtin.debug:
        msg: >-
          Applied latest password for users: {{
            ((hostvars[inventory_hostname].latest_shadow_by_user | default({}))
              | dict2items
              | selectattr('key', 'in', local_human_users | default([]))
              | map(attribute='key')
              | list)
          }}
