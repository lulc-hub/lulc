---
- name: Sync each user's latest password (from any host) to all hosts
  hosts: lu_1
  gather_facts: false
  become: true

  vars:
    min_uid: 1000
    # Hash patterns considered "real" passwords. Skip locked/disabled like '!' or '*'.
    valid_hash_regex: '^(\$[0-9a-zA-Z]+\$.*)$'

  tasks:
    - name: Get passwd database (to identify normal users)
      ansible.builtin.getent:
        database: passwd
      register: passwd_db

    - name: Build list of local human users (uid >= {{ min_uid }})
      ansible.builtin.set_fact:
        local_human_users: >-
          {{
            passwd_db.ansible_facts.getent_passwd
            | dict2items
            | selectattr('value.1', '>=', min_uid)   # value.1 is UID
            | map(attribute='key')
            | list
          }}

    - name: Extract username:hash:lastchg for local human users
      ansible.builtin.shell: |
        awk -F: '
          NR==FNR && $3 >= {{ min_uid }} {u[$1]=1; next}
          ($1 in u) { printf "%s:%s:%s\n", $1, $2, $3 }
        ' /etc/passwd /etc/shadow
      register: shadow_lines
      changed_when: false

    - name: Parse shadow lines into a per-host map {user: {hash,lastchg}}
      ansible.builtin.set_fact:
        host_shadow_map: >-
          {{
            dict(
              (shadow_lines.stdout_lines | default([]))
              | map('split', ':')
              | map('zip', ['user','hash','lastchg'] | map('string') | list)
              | map('items2dict')
              | map('combine', {'lastchg': (item.lastchg | int)}, recursive=True)
              | list
              | map('extract', ['user','hash','lastchg'])
              | map('community.general.dict_kv', 'user')
              | list
            )
          }}
      vars:
        # Small helper to reshape into {key:value} pairs
        # community.general is built-in on many installs; if missing, we fall back below.
        item: {}

      # Fallback for environments without community.general:
      # If you don't have that collection, comment out the task above and use this instead:
      # - set_fact:
      #     host_shadow_map: "{{ host_shadow_map | default({}) | combine({ u[0]: {'hash': u[1], 'lastchg': (u[2] | int)} }) }}"
      #   loop: "{{ (shadow_lines.stdout_lines | default([])) | map('split', ':') | list }}"
      #   loop_control:
      #     loop_var: u

    - name: Stash each host's map into hostvars so we can aggregate
      ansible.builtin.set_fact:
        __shadow_map_for_agg: "{{ host_shadow_map | default({}) }}"

    - name: Build global 'latest per user' map across all hosts
      run_once: true
      ansible.builtin.set_fact:
        latest_shadow_by_user: >-
          {%- set acc = {} -%}
          {%- for h in groups['all'] -%}
            {%- set m = hostvars[h].__shadow_map_for_agg | default({}) -%}
            {%- for u, rec in m.items() -%}
              {%- if (rec.hash is regex(valid_hash_regex)) -%}
                {%- if u not in acc or (rec.lastchg | int) > (acc[u].lastchg | int) -%}
                  {%- set _ = acc.update({ u: {'hash': rec.hash, 'lastchg': (rec.lastchg | int), 'source_host': h }}) -%}
                {%- endif -%}
              {%- endif -%}
            {%- endfor -%}
          {%- endfor -%}
          {{ acc }}

    - name: Show summary of winners (latest hash per user)
      run_once: true
      ansible.builtin.debug:
        msg: >-
          Latest password winners (per user): {{
            latest_shadow_by_user | dict2items
            | map(
                'combine',
                {'value':
                  {'last_changed_days_since_epoch': item.value.lastchg,
                   'from_host': item.value.source_host}
                }
              )
          }}

    - name: Apply latest hashes to users that exist on this host
      vars:
        local_user_set: "{{ local_human_users | default([]) | items2dict(key_name='key', value_name='val') }}"
      ansible.builtin.user:
        name: "{{ item.key }}"
        password: "{{ item.value.hash }}"
        update_password: on_change
      loop: "{{ (hostvars[inventory_hostname]['latest_shadow_by_user'] | default({})) | dict2items }}"
      when:
        - item.key in local_human_users
        - item.value.hash is regex(valid_hash_regex)

    - name: Report changes on this host
      ansible.builtin.debug:
        msg: >-
          Applied latest password for users: {{
            ((hostvars[inventory_hostname]['latest_shadow_by_user'] | default({}))
              | dict2items
              | selectattr('key', 'in', local_human_users | default([]))
              | map(attribute='key')
              | list)
          }}
