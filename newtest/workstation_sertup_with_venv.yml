---
- name: Workstation setup (TeamViewer, SSH, dev tools, Python packages in venv via PATH)
  hosts: lab4
  become: yes
  become_method: sudo
  become_user: root
  gather_facts: true

  vars:
    teamviewer_deb_url: "https://download.teamviewer.com/download/linux/teamviewer_amd64.deb"
    teamviewer_deb_path: "/tmp/teamviewer_amd64.deb"

    base_packages:
      - gcc
      - gnat
      - git
      - default-jre
      - default-jdk
      - erlang
      - nodejs
      - make
      - r-base
      - r-cran-rstudioapi
      - flex
      - bison
      - sqlite3
      - sqlite3-tools
      - openjdk-17-jdk-headless
      - xterm
      - scrypt
      - screen
      - build-essential
      - libssl-dev
      - zlib1g-dev
      - libbz2-dev
      - libreadline-dev
      - libsqlite3-dev
      - wget
      - curl
      - llvm
      - libncurses5-dev
      - libncursesw5-dev
      - xz-utils
      - tk-dev
      - libffi-dev
      - liblzma-dev
      - code
      - python3
      - python3-venv
      - libpng-dev
      - libfreetype6-dev
      - libblas-dev
      - liblapack-dev

    python_packages:
      - numpy
      - scikit-learn
      - scipy
      - matplotlib
      - pycryptodomex
      - cryptography
      - pytest
      - pandas
      - notebook
      - spyder

    # --- venv settings ---
    venv_dir: /opt/python-venv
    venv_upgrade_mode: recreate   # or 'inplace'
    manage_sudo_secure_path: false  # set true to install sudoers drop-in

  tasks:
    - name: Add Microsoft GPG key
      ansible.builtin.apt_key:
        url: https://packages.microsoft.com/keys/microsoft.asc
        state: present

    - name: Add VS Code repository
      ansible.builtin.apt_repository:
        repo: deb [arch=amd64] https://packages.microsoft.com/repos/code stable main
        state: present
        filename: vscode

    - name: Update apt cache and upgrade packages
      ansible.builtin.apt:
        update_cache: true
        upgrade: dist
        cache_valid_time: 3600

    - name: Install general development/runtime packages
      ansible.builtin.apt:
        name: "{{ base_packages }}"
        state: present

    # =========================
    # venv UPGRADE (version-aware)  -> -t venv_upgrade
    # =========================
    - name: Check if venv python exists
      ansible.builtin.stat:
        path: "{{ venv_dir }}/bin/python3"
      register: stat_venv_python
      tags: [venv_upgrade]

    - name: Read system Python version (major.minor.patch)
      ansible.builtin.command: >
        python3 -c 'import sys; print(".".join(map(str, sys.version_info[:3])))'
      register: sys_pyver_cmd
      changed_when: false
      tags: [venv_upgrade]

    - name: Read venv Python version (major.minor.patch)
      ansible.builtin.command: >
        {{ venv_dir }}/bin/python3 -c 'import sys; print(".".join(map(str, sys.version_info[:3])))'
      register: venv_pyver_cmd
      changed_when: false
      failed_when: false
      when: stat_venv_python.stat.exists
      tags: [venv_upgrade]

    - name: Set initial version facts
      ansible.builtin.set_fact:
        sys_pyver: "{{ sys_pyver_cmd.stdout | default('') }}"
        venv_pyver: "{{ (venv_pyver_cmd.stdout | default('missing')) if stat_venv_python.stat.exists else 'missing' }}"
        venv_exists: "{{ stat_venv_python.stat.exists }}"
      tags: [venv_upgrade]

    - name: Set upgrade needed fact
      ansible.builtin.set_fact:
        venv_needs_upgrade: "{{ (not venv_exists) or (venv_exists and venv_pyver != sys_pyver) }}"
      tags: [venv_upgrade]

    - name: Debug version comparison
      ansible.builtin.debug:
        msg:
          - "System Python: {{ sys_pyver }}"
          - "Venv Python:   {{ venv_pyver }}"
          - "Upgrade needed: {{ venv_needs_upgrade }}"
      tags: [venv_upgrade]

    - name: Remove old venv (recreate mode)
      ansible.builtin.file:
        path: "{{ venv_dir }}"
        state: absent
      when: venv_needs_upgrade and venv_upgrade_mode == 'recreate'
      tags: [venv_upgrade]

    - name: Create virtual environment (new or after removal) with real binaries
      ansible.builtin.command: "python3 -m venv --copies {{ venv_dir }}"
      args:
        creates: "{{ venv_dir }}/bin/activate"
      when: (not venv_exists) or (venv_needs_upgrade and venv_upgrade_mode == 'recreate')
      tags: [venv_upgrade]

    - name: In-place upgrade venv to latest system python
      ansible.builtin.command: "python3 -m venv --upgrade {{ venv_dir }}"
      when: venv_needs_upgrade and venv_upgrade_mode == 'inplace'
      tags: [venv_upgrade]

    - name: Upgrade pip/setuptools/wheel in venv
      ansible.builtin.pip:
        name: [pip, setuptools, wheel]
        state: latest
        executable: "{{ venv_dir }}/bin/pip"
      tags: [venv_upgrade]

    - name: Install/upgrade Python packages in venv
      ansible.builtin.pip:
        name: "{{ python_packages }}"
        state: latest
        executable: "{{ venv_dir }}/bin/pip"
      tags: [venv_upgrade]

    - name: Symlink venv python/pip for convenience
      ansible.builtin.file:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        state: link
      loop:
        - { src: "{{ venv_dir }}/bin/python3", dest: /usr/local/bin/python-ds }
        - { src: "{{ venv_dir }}/bin/pip", dest: /usr/local/bin/pip-ds }
      tags: [venv_upgrade]

    # =========================
    # venv FIX (recreate venv only) -> -t venv_fix
    # =========================
    - name: Remove existing venv (repair)
      ansible.builtin.file:
        path: "{{ venv_dir }}"
        state: absent
      tags: [venv_fix]

    - name: Create venv with --copies (repair)
      ansible.builtin.command: "python3 -m venv --copies {{ venv_dir }}"
      args:
        creates: "{{ venv_dir }}/bin/activate"
      tags: [venv_fix]

    - name: Upgrade pip/setuptools/wheel in repaired venv
      ansible.builtin.pip:
        name: [pip, setuptools, wheel]
        state: latest
        executable: "{{ venv_dir }}/bin/pip"
      tags: [venv_fix]

    - name: Reinstall Python packages in repaired venv
      ansible.builtin.pip:
        name: "{{ python_packages }}"
        state: latest
        executable: "{{ venv_dir }}/bin/pip"
      tags: [venv_fix]

    # =========================
    # PATH-BASED DEFAULTS -> -t venv_path
    # =========================
    - name: Make venv first on PATH for interactive shells
      ansible.builtin.copy:
        dest: /etc/profile.d/99-python-venv.sh
        mode: "0644"
        content: |
          # Prefer managed Python venv by default (interactive shells)
          if [ -d "{{ venv_dir }}/bin" ] ; then
            case ":$PATH:" in
              *:"{{ venv_dir }}/bin":*) ;;
              *) export PATH="{{ venv_dir }}/bin:$PATH" ;;
            esac
          fi
      tags: [venv_path]

    - name: Optionally expose venv to sudo secure_path (for sudo sessions)
      when: manage_sudo_secure_path | bool
      ansible.builtin.copy:
        dest: /etc/sudoers.d/99-python-venv
        mode: "0440"
        validate: 'visudo -cf %s'
        content: |
          Defaults    secure_path="{{ venv_dir }}/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
      tags: [venv_path]

    # ---------------- TeamViewer ----------------
    - name: Download TeamViewer .deb
      ansible.builtin.get_url:
        url: "{{ teamviewer_deb_url }}"
        dest: "{{ teamviewer_deb_path }}"
        mode: "0644"

    - name: Install TeamViewer from .deb
      ansible.builtin.apt:
        deb: "{{ teamviewer_deb_path }}"
        state: present
        update_cache: true

    # ---------------- Docker CE repo setup ----------------
    - name: Install Docker prerequisites
      ansible.builtin.apt:
        name:
          - ca-certificates
          - curl
        state: present
        update_cache: true

    - name: Ensure /etc/apt/keyrings exists
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: "0755"

    - name: Remove legacy Docker GPG key (if present)
      ansible.builtin.file:
        path: /etc/apt/keyrings/docker.gpg
        state: absent

    - name: Remove legacy docker.list if it references docker.gpg
      ansible.builtin.lineinfile:
        path: /etc/apt/sources.list.d/docker.list
        state: absent
        regexp: '^deb\s.*docker.*gpg.*$'
      when: ansible_facts['distribution'] == 'Ubuntu'
      ignore_errors: true

    - name: Download Docker repository ASC key
      ansible.builtin.get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker.asc
        mode: "0644"

    - name: Compute dpkg architecture for Docker repo
      ansible.builtin.set_fact:
        dpkg_arch: >-
          {{
            'arm64' if ansible_architecture in ['aarch64','arm64']
            else 'amd64' if ansible_architecture in ['x86_64','amd64']
            else ansible_architecture
          }}

    - name: Add Docker APT repository (uses ASC key)
      ansible.builtin.apt_repository:
        repo: >-
          deb [arch={{ dpkg_arch }} signed-by=/etc/apt/keyrings/docker.asc]
          https://download.docker.com/linux/ubuntu
          {{ ansible_distribution_release | lower }} stable
        filename: docker
        state: present

    - name: Update apt cache (after adding Docker repo)
      ansible.builtin.apt:
        update_cache: true

    - name: Install Docker CE and related components
      ansible.builtin.apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present

    - name: Ensure docker group exists
      ansible.builtin.group:
        name: docker
        state: present
