---
- name: Workstation setup (TeamViewer, SSH, dev tools, Python packages in venv)
  hosts: lab1
  become: yes
  become_method: sudo
  become_user: root
  gather_facts: true

  vars:
    teamviewer_deb_url: "https://download.teamviewer.com/download/linux/teamviewer_amd64.deb"
    teamviewer_deb_path: "/tmp/teamviewer_amd64.deb"

    base_packages:
      - gcc
      - gnat
      - git
      - default-jre
      - default-jdk
      - erlang
      - nodejs
      - make
      - r-base
      - r-cran-rstudioapi
      - flex
      - bison
      - sqlite3
      - sqlite3-tools
      - openjdk-17-jdk-headless
      - xterm
      - scrypt
      - screen
      - build-essential
      - libssl-dev
      - zlib1g-dev
      - libbz2-dev
      - libreadline-dev
      - libsqlite3-dev
      - wget
      - curl
      - llvm
      - libncurses5-dev
      - libncursesw5-dev
      - xz-utils
      - tk-dev
      - libffi-dev
      - liblzma-dev
      - code
      - python3
      - python3-venv
      - libpng-dev
      - libfreetype6-dev
      - libblas-dev
      - liblapack-dev

    python_packages:
      - numpy
      - scikit-learn
      - scipy
      - matplotlib
      - pycryptodomex
      - cryptography
      - pytest
      - pandas
      - notebook
      - spyder

    # --- venv settings ---
    venv_dir: /opt/python-venv
    venv_upgrade_mode: recreate   # or 'inplace'

  tasks:
    - name: Add Microsoft GPG key
      ansible.builtin.apt_key:
        url: https://packages.microsoft.com/keys/microsoft.asc
        state: present

    - name: Add VS Code repository
      ansible.builtin.apt_repository:
        repo: deb [arch=amd64] https://packages.microsoft.com/repos/code stable main
        state: present
        filename: vscode

    - name: Update apt cache and upgrade packages
      ansible.builtin.apt:
        update_cache: true
        upgrade: dist
        cache_valid_time: 3600

    - name: Install general development/runtime packages
      ansible.builtin.apt:
        name: "{{ base_packages }}"
        state: present

    # ---------------- venv: detect/upgrade logic ----------------
    - name: Check if venv python exists
      ansible.builtin.stat:
        path: "{{ venv_dir }}/bin/python"
      register: stat_venv_python
      tags: [venv_upgrade]

    - name: Read system Python version (major.minor.patch)
      ansible.builtin.command: >
        python3 -c 'import sys; print(".".join(map(str, sys.version_info[:3])))'
      register: sys_pyver_cmd
      changed_when: false
      tags: [venv_upgrade]

    - name: Read venv Python version (major.minor.patch)
      ansible.builtin.command: >
        {{ venv_dir }}/bin/python -c 'import sys; print(".".join(map(str, sys.version_info[:3])))'
      register: venv_pyver_cmd
      changed_when: false
      failed_when: false
      when: stat_venv_python.stat.exists
      tags: [venv_upgrade]

    - name: Set version facts
      ansible.builtin.set_fact:
        sys_pyver: "{{ sys_pyver_cmd.stdout | default('') }}"
        venv_pyver: "{{ (venv_pyver_cmd.stdout | default('missing')) if stat_venv_python.stat.exists else 'missing' }}"
        venv_exists: "{{ stat_venv_python.stat.exists }}"
      tags: [venv_upgrade]

    - name: Decide if venv needs (re)creation due to version mismatch
      ansible.builtin.set_fact:
        venv_needs_upgrade: "{{ (not venv_exists) or (venv_exists and venv_pyver != sys_pyver) }}"
      tags: [venv_upgrade]

    - name: Debug version comparison
      ansible.builtin.debug:
        msg:
          - "System Python: {{ sys_pyver }}"
          - "Venv Python:   {{ venv_pyver }}"
          - "Upgrade needed: {{ venv_needs_upgrade }}"
      tags: [venv_upgrade]

    - name: Remove old venv (recreate mode)
      ansible.builtin.file:
        path: "{{ venv_dir }}"
        state: absent
      when: venv_needs_upgrade and venv_upgrade_mode == 'recreate'
      tags: [venv_upgrade]

    - name: Create virtual environment (new or after removal)
      ansible.builtin.command: "python3 -m venv {{ venv_dir }}"
      args:
        creates: "{{ venv_dir }}/bin/activate"
      when: (not venv_exists) or (venv_needs_upgrade and venv_upgrade_mode == 'recreate')
      tags: [venv_upgrade]

    - name: In-place upgrade venv to latest system python
      ansible.builtin.command: "python3 -m venv --upgrade {{ venv_dir }}"
      when: venv_needs_upgrade and venv_upgrade_mode == 'inplace'
      tags: [venv_upgrade]

    - name: Upgrade pip/setuptools/wheel in venv
      ansible.builtin.pip:
        name: [pip, setuptools, wheel]
        state: latest
        executable: "{{ venv_dir }}/bin/pip"
      tags: [venv_upgrade]

    - name: Install/upgrade Python packages in venv
      ansible.builtin.pip:
        name: "{{ python_packages }}"
        state: latest
        executable: "{{ venv_dir }}/bin/pip"
      tags: [venv_upgrade]

    - name: Ensure system-wide python3 points to venv
      ansible.builtin.alternatives:
        name: python3
        path: "{{ venv_dir }}/bin/python"
        link: /usr/bin/python3
      tags: [venv_upgrade]

    - name: Ensure system-wide pip3 points to venv
      ansible.builtin.alternatives:
        name: pip3
        path: "{{ venv_dir }}/bin/pip"
        link: /usr/bin/pip3
      tags: [venv_upgrade]

    - name: Symlink venv python/pip for convenience
      ansible.builtin.file:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        state: link
      loop:
        - { src: "{{ venv_dir }}/bin/python", dest: /usr/local/bin/python-ds }
        - { src: "{{ venv_dir }}/bin/pip", dest: /usr/local/bin/pip-ds }

    # ---------------- TeamViewer ----------------
    - name: Download TeamViewer .deb
      ansible.builtin.get_url:
        url: "{{ teamviewer_deb_url }}"
        dest: "{{ teamviewer_deb_path }}"
        mode: "0644"

    - name: Install TeamViewer from .deb
      ansible.builtin.apt:
        deb: "{{ teamviewer_deb_path }}"
        state: present
        update_cache: true

    # ---------------- SSH setup ----------------
    - name: Ensure OpenSSH server is installed
      ansible.builtin.apt:
        name: openssh-server
        state: present

    - name: Enable and start SSH service
      ansible.builtin.service:
        name: ssh
        state: started
        enabled: true

    # ---------------- Docker CE repo setup ----------------
    - name: Install Docker prerequisites
      ansible.builtin.apt:
        name:
          - ca-certificates
          - curl
        state: present
        update_cache: true

    - name: Ensure /etc/apt/keyrings exists
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: "0755"

    - name: Remove legacy Docker GPG key (if present)
      ansible.builtin.file:
        path: /etc/apt/keyrings/docker.gpg
        state: absent

    - name: Remove legacy docker.list if it references docker.gpg
      ansible.builtin.lineinfile:
        path: /etc/apt/sources.list.d/docker.list
        state: absent
        regexp: '^deb\s.*docker.*gpg.*$'
      when: ansible_facts['dis]()_
