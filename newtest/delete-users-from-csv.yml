---
- name: Delete multiple users from CSV file
  hosts: test
  become: yes
  become_method: sudo
  become_user: root
  gather_facts: false

  vars:
    csv_path: "./newusers.csv"
    remove_home_dirs: true

  pre_tasks:
    - name: Check the CSV exists on the control node
      delegate_to: localhost
      run_once: true
      stat:
        path: "{{ csv_path | expanduser }}"
      register: csv_stat

    - name: Fail if CSV not found
      delegate_to: localhost
      run_once: true
      fail:
        msg: "CSV not found at {{ csv_path | expanduser }} on the control node."
      when: not csv_stat.stat.exists

    - name: Read users from CSV (requires community.general)
      delegate_to: localhost
      run_once: true
      community.general.read_csv:
        path: "{{ csv_path | expanduser }}"
      register: users_csv

    - name: Display users that will be deleted
      debug:
        msg: "Users to delete: {{ users_csv.list | map(attribute='Username') | list }}"
      run_once: true

  tasks:
    - name: Check which users exist on the system
      command: "id {{ item.Username }}"
      register: user_existence
      ignore_errors: yes
      changed_when: false
      loop: "{{ users_csv.list }}"
      loop_control:
        label: "{{ item.Username }}"

    - name: Delete users that exist
      user:
        name: "{{ item.item.Username }}"
        state: absent
        remove: "{{ remove_home_dirs }}"
        force: "{{ remove_home_dirs }}"
      loop: "{{ user_existence.results }}"
      loop_control:
        label: "{{ item.item.Username }}"
      when: item.rc == 0

    - name: Force kill processes owned by deleted users
      shell: "pkill -u {{ item.item.Username }} || true"
      loop: "{{ user_existence.results }}"
      loop_control:
        label: "{{ item.item.Username }}"
      when: item.rc == 0
      ignore_errors: yes
      changed_when: false

    - name: Verify users have been deleted
      command: "id {{ item.item.Username }}"
      register: deletion_verification
      ignore_errors: yes
      changed_when: false
      loop: "{{ user_existence.results }}"
      loop_control:
        label: "{{ item.item.Username }}"
      when: item.rc == 0

    - name: Display deletion results
      debug:
        msg: "User '{{ item.item.Username }}' {{ 'successfully deleted' if item.rc != 0 else 'still exists (deletion failed)' }}"
      loop: "{{ deletion_verification.results }}"
      loop_control:
        label: "{{ item.item.Username }}"
      when: item.rc is defined

    - name: Summary report
      debug:
        msg: |
          Deletion process completed.
          Total users in CSV: {{ users_csv.list | length }}
          Users deleted: {{ deletion_verification.results | selectattr('rc', '!=', 0) | length }}
          Users skipped (non-existent): {{ user_existence.results | selectattr('rc', '!=', 0) | length }}
          Home directories removed: {{ remove_home_dirs | bool | string }}
      run_once: true
