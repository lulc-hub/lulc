---
- name: Manage user group membership from CSV
  hosts: lab_all
  become: yes
  become_method: sudo
  become_user: root
  gather_facts: no

  vars:
    csv_file: "{{ playbook_dir }}/alllabusers.csv"  # CSV in same dir as playbook

  pre_tasks:
    - name: Check if CSV file exists
      delegate_to: localhost
      run_once: true
      ansible.builtin.stat:
        path: "{{ csv_file }}"
      register: csv_stat

    - name: Fail if CSV file is missing
      delegate_to: localhost
      run_once: true
      ansible.builtin.fail:
        msg: "CSV file not found at {{ csv_file }}"
      when: not csv_stat.stat.exists

    - name: Read user data from CSV
      delegate_to: localhost
      run_once: true
      community.general.read_csv:
        path: "{{ csv_file }}"
        delimiter: ","
      register: csv_data

    - name: Set userlist fact
      ansible.builtin.set_fact:
        userlist: "{{ csv_data.list }}"

    - name: Validate CSV data
      delegate_to: localhost
      run_once: true
      ansible.builtin.fail:
        msg: "Invalid CSV data: Username or Groups column missing or empty for some entries"
      when: >
        userlist | map(attribute='Username', default='_undefined_') | select('eq', '_undefined_') | list | length > 0 or
        userlist | map(attribute='Groups', default='_undefined_') | select('eq', '_undefined_') | list | length > 0 or
        userlist | map(attribute='Username') | select('eq', '') | list | length > 0

  tasks:
    - name: Ensure users exist
      ansible.builtin.user:
        name: "{{ item.Username }}"
        state: present
        create_home: yes
        shell: /bin/bash
      loop: "{{ userlist }}"
      loop_control:
        label: "{{ item.Username }}"

    - name: Ensure groups exist
      ansible.builtin.group:
        name: "{{ group_name }}"
        state: present
      loop: "{{ userlist | subelements('Groups.split(\",\")', skip_missing=True) }}"
      loop_control:
        label: "{{ group_name }}"
        loop_var: group_name
      vars:
        group_name: "{{ group_name[1] | trim }}"

    - name: Check user group membership
      ansible.builtin.shell: id -nG "{{ item.Username }}"
      register: current_groups
      changed_when: false
      failed_when: false
      loop: "{{ userlist }}"
      loop_control:
        label: "{{ item.Username }}"

    - name: Add user to groups if not present
      ansible.builtin.user:
        name: "{{ item.Username }}"
        groups: "{{ item.Groups.split(',') | map('trim') | list | join(',') }}"
        append: yes
      when: >
        current_groups.rc == 0 and
        item.Groups | length > 0 and
        (item.Groups.split(',') | map('trim') | list | difference(current_groups.stdout.split())) | length > 0
      loop: "{{ userlist }}"
      loop_control:
        label: "{{ item.Username }}"

    - name: Display already exists message
      ansible.builtin.debug:
        msg: "User {{ item[0].Username }} already exists in group {{ item[1] }}"
      loop: "{{ userlist | subelements('Groups.split(\",\")', skip_missing=True) }}"
      loop_control:
        label: "{{ item[0].Username }}:{{ item[1] }}"
      when: >
        current_groups.rc == 0 and
        item[1] | trim in current_groups.stdout.split()
